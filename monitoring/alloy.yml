apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: alloy
  name: alloy
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: alloy
  template:
    metadata:
      labels:
        app: alloy
    spec:
      serviceAccountName: alloy-sa
      containers:
        - name: alloy
          image: ghcr.io/pmh-only/alloy:latest
          resources:
            requests:
              cpu: 250m
              memory: 750Mi
          volumeMounts:
            - name: alloy-config
              mountPath: /etc/alloy/config.alloy
              subPath: config.alloy
      volumes:
        - name: alloy-config
          configMap:
            name: alloy-config
---
apiVersion: v1
kind: Service
metadata:
  name: alloy
  namespace: monitoring
spec:
  ports:
    - port: 4317
      protocol: TCP
      targetPort: 4317
    - port: 4318
      protocol: TCP
      targetPort: 4318
  selector:
    app: alloy
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: alloy-config
  namespace: monitoring
data:
  config.alloy: |
    loki.write "default" {
      endpoint {
        url = "http://loki:3100/loki/api/v1/push"
      }
    }

    discovery.kubernetes "pod" {
      role = "pod"
    }

    discovery.relabel "pod_logs" {
      targets = discovery.kubernetes.pod.targets

      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        action = "replace"
        target_label = "namespace"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        action = "replace"
        target_label = "pod"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "container"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        action = "replace"
        target_label = "app"
      }

      rule {
        source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "job"
        separator = "/"
        replacement = "$1"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
        action = "replace"
        target_label = "__path__"
        separator = "/"
        replacement = "/var/log/pods/*$1/*.log"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_container_id"]
        action = "replace"
        target_label = "container_runtime"
        regex = "^(\\S+):\\/\\/.+$"
        replacement = "$1"
      }
    }

    loki.source.kubernetes "pod_logs" {
      targets    = discovery.relabel.pod_logs.output
      forward_to = [loki.process.pod_logs.receiver]
    }

    loki.process "pod_logs" {
      stage.static_labels {
          values = {
            cluster = "pmhoci",
          }
      }

      forward_to = [loki.write.default.receiver]
    }

    discovery.kubernetes "ksm" {
      role = "pod"

      namespaces {
        own_namespace = true
        names = ["monitoring"]
      }

      selectors {
        role  = "pod"
        label = "app = ksm"
      }
    }

    prometheus.scrape "ksm" {
      targets    = discovery.kubernetes.ksm.targets
      forward_to = [prometheus.remote_write.default.receiver]
    }

    
    discovery.kubernetes "ne" {
      role = "pod"

      namespaces {
        own_namespace = true
        names = ["monitoring"]
      }

      selectors {
        role  = "pod"
        label = "app = ne"
      }
    }

    prometheus.scrape "ne" {
      targets    = discovery.kubernetes.ne.targets
      forward_to = [prometheus.remote_write.default.receiver]
    }

    discovery.kubernetes "node" {
      role = "node"
    }

    prometheus.scrape "node" {
      scheme = "https"
      targets    = discovery.kubernetes.node.targets
      forward_to = [prometheus.remote_write.default.receiver]

      tls_config {
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      }
      
      authorization {
        credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      }
    }
    
    prometheus.scrape "cadvisor" {
      scheme = "https"
      metrics_path = "/metrics/cadvisor"
      targets    = discovery.kubernetes.node.targets
      forward_to = [prometheus.remote_write.default.receiver]
      
      tls_config {
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      }
      
      authorization {
        credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      }
    }

    discovery.kubernetes "apiserver" {
      role = "endpoints"
    }

    prometheus.scrape "apiserver" {
      scheme = "https"
      targets    = discovery.kubernetes.apiserver.targets
      forward_to = [prometheus.relabel.apiserver.receiver]

      tls_config {
        ca_file = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
      }
      
      authorization {
        credentials_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      }
    }

    prometheus.relabel "apiserver" {
      forward_to = [
        prometheus.remote_write.default.receiver,
      ]

      rule {
        source_labels = [
          "__meta_kubernetes_namespace",
          "__meta_kubernetes_service_name",
          "__meta_kubernetes_endpoint_port_name",
        ]
        action = "keep"
        regex = "default;kubernetes;https"
      }
    }

    discovery.kubernetes "ingress" {
      role = "pod"

      namespaces {
        names = ["ingress"]
      }

      selectors {
        role  = "pod"
        label = "app.kubernetes.io/name = ingress-nginx"
      }
    }

    prometheus.scrape "ingress" {
      targets    = discovery.kubernetes.ingress.targets
      forward_to = [prometheus.remote_write.default.receiver]
    }

    discovery.kubernetes "minecraft" {
      role = "pod"

      namespaces {
        names = ["minecraft"]
      }
    }

    prometheus.scrape "minecraft" {
      targets    = discovery.kubernetes.minecraft.targets
      forward_to = [prometheus.remote_write.default.receiver]
    }

    prometheus.remote_write "default" {
      endpoint {
        url = "http://mimir:8080/api/v1/push"
      }
    }

    otelcol.receiver.otlp "default" {
      grpc {
        endpoint = "0.0.0.0:4317"
      }

      http {
        endpoint = "0.0.0.0:4318"
      }

      output {
        metrics = [otelcol.processor.batch.default.input]
        logs    = [otelcol.processor.batch.default.input]
        traces  = [otelcol.processor.batch.default.input]
      }
    }

    otelcol.processor.batch "default" {
      output {
        metrics = [otelcol.exporter.prometheus.mimir.input]
        logs    = [otelcol.exporter.loki.loki.input]
        traces  = [otelcol.exporter.otlp.tempo.input]
      }
    }

    otelcol.exporter.prometheus "mimir" {
      forward_to = [prometheus.remote_write.default.receiver]
    }

    otelcol.exporter.loki "loki" {
      forward_to = [loki.write.default.receiver]
    }

    otelcol.exporter.otlp "tempo" {
      client {
        endpoint = "tempo:8080"
      }
    }

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: alloy-sa
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: alloy-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "nodes/metrics", "pods/log"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: alloy-sa
subjects:
  - kind: ServiceAccount
    name: alloy-sa
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: alloy-role
  apiGroup: rbac.authorization.k8s.io
