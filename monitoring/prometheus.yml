apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
        - name: prometheus
          image: quay.io/prometheus/prometheus:latest
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      keep_dropped_targets: 100

    scrape_configs:
      - job_name: "ingress"

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["ingress"]
            selectors:
              - role: pod
                label: "app.kubernetes.io/name = ingress-nginx"

        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_number]
            regex: "10254"
            action: keep

      - job_name: "minecraft"

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["minecraft"]
                
      - job_name: "ne"

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              own_namespace: true
              names: ["monitoring"]
            selectors:
              - role: pod
                label: "app = ne"

      - job_name: "ksm"

        kubernetes_sd_configs:
          - role: pod
            namespaces:
              own_namespace: true
              names: ["monitoring"]
            selectors:
              - role: pod
                label: "app = ksm"

      - job_name: "kubernetes-apiservers"

        kubernetes_sd_configs:
          - role: endpoints

        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    
        authorization:
          credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        relabel_configs:
          - source_labels:
              [
                __meta_kubernetes_namespace,
                __meta_kubernetes_service_name,
                __meta_kubernetes_endpoint_port_name,
              ]
            action: keep
            regex: default;kubernetes;https

      - job_name: "kubernetes-nodes"
        scheme: https

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

        authorization:
          credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: "kubernetes-cadvisor"
        scheme: https
        metrics_path: /metrics/cadvisor

        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt

        authorization:
          credentials_file: /var/run/secrets/kubernetes.io/serviceaccount/token

        kubernetes_sd_configs:
          - role: node

        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: "minio-cluster"
        metrics_path: /minio/v2/metrics/cluster
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["minio"]
            selectors:
              - role: pod
                label: "app = minio"

      - job_name: "minio-node"
        metrics_path: /minio/v2/metrics/node
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["minio"]
            selectors:
              - role: pod
                label: "app = minio"

      - job_name: "minio-server"
        metrics_path: /minio/v2/metrics/bucket
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["minio"]
            selectors:
              - role: pod
                label: "app = minio"

      - job_name: "minio-resource"
        metrics_path: /minio/v2/metrics/resource
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names: ["minio"]
            selectors:
              - role: pod
                label: "app = minio"
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  ports:
    - port: 9090
  selector:
    app: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources: ["pods", "nodes", "nodes/metrics", "pods/log", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-sa
subjects:
  - kind: ServiceAccount
    name: prometheus-sa
    apiGroup: ""
roleRef:
  kind: ClusterRole
  name: prometheus-role
  apiGroup: rbac.authorization.k8s.io
